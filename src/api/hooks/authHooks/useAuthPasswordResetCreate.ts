/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthPasswordResetCreateMutationRequest, AuthPasswordResetCreateMutationResponse } from "../../types/AuthPasswordResetCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const authPasswordResetCreateMutationKey = () => [{ url: '/api/auth/password/reset/' }] as const

export type AuthPasswordResetCreateMutationKey = ReturnType<typeof authPasswordResetCreateMutationKey>

/**
 * @description Calls Django Auth PasswordResetForm save method.Accepts the following POST parameters: emailReturns the success/fail message.
 * {@link /api/auth/password/reset/}
 */
export async function authPasswordResetCreate(data: AuthPasswordResetCreateMutationRequest, config: Partial<RequestConfig<AuthPasswordResetCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<AuthPasswordResetCreateMutationResponse, ResponseErrorConfig<Error>, AuthPasswordResetCreateMutationRequest>({ method : "POST", url : `/api/auth/password/reset/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Calls Django Auth PasswordResetForm save method.Accepts the following POST parameters: emailReturns the success/fail message.
 * {@link /api/auth/password/reset/}
 */
export function useAuthPasswordResetCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthPasswordResetCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthPasswordResetCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<AuthPasswordResetCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authPasswordResetCreateMutationKey()

  return useMutation<AuthPasswordResetCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthPasswordResetCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return authPasswordResetCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}