/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { ConversationsMessagesListQueryResponse, ConversationsMessagesListPathParams, ConversationsMessagesListQueryParams } from "../../types/ConversationsMessagesList.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const conversationsMessagesListSuspenseQueryKey = (parent_lookup_conversation: ConversationsMessagesListPathParams["parent_lookup_conversation"], params?: ConversationsMessagesListQueryParams) => [{ url: '/api/conversations/:parent_lookup_conversation/messages/', params: {parent_lookup_conversation:parent_lookup_conversation} }, ...(params ? [params] : [])] as const

export type ConversationsMessagesListSuspenseQueryKey = ReturnType<typeof conversationsMessagesListSuspenseQueryKey>

/**
 * {@link /api/conversations/:parent_lookup_conversation/messages/}
 */
export async function conversationsMessagesListSuspense(parent_lookup_conversation: ConversationsMessagesListPathParams["parent_lookup_conversation"], params?: ConversationsMessagesListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ConversationsMessagesListQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/conversations/${parent_lookup_conversation}/messages/`, params, ... requestConfig })  
  return res.data
}

export function conversationsMessagesListSuspenseQueryOptions(parent_lookup_conversation: ConversationsMessagesListPathParams["parent_lookup_conversation"], params?: ConversationsMessagesListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = conversationsMessagesListSuspenseQueryKey(parent_lookup_conversation, params)
  return queryOptions<ConversationsMessagesListQueryResponse, ResponseErrorConfig<Error>, ConversationsMessagesListQueryResponse, typeof queryKey>({
   enabled: !!(parent_lookup_conversation),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return conversationsMessagesListSuspense(parent_lookup_conversation, params, config)
   },
  })
}

/**
 * {@link /api/conversations/:parent_lookup_conversation/messages/}
 */
export function useConversationsMessagesListSuspense<TData = ConversationsMessagesListQueryResponse, TQueryKey extends QueryKey = ConversationsMessagesListSuspenseQueryKey>(parent_lookup_conversation: ConversationsMessagesListPathParams["parent_lookup_conversation"], params?: ConversationsMessagesListQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ConversationsMessagesListQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? conversationsMessagesListSuspenseQueryKey(parent_lookup_conversation, params)

  const query = useSuspenseQuery({
   ...conversationsMessagesListSuspenseQueryOptions(parent_lookup_conversation, params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}