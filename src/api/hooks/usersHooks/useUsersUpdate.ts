/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { UsersUpdateMutationRequest, UsersUpdateMutationResponse, UsersUpdatePathParams } from "../../types/UsersUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const usersUpdateMutationKey = () => [{ url: '/api/users/:id/' }] as const

export type UsersUpdateMutationKey = ReturnType<typeof usersUpdateMutationKey>

/**
 * {@link /api/users/:id/}
 */
export async function usersUpdate(id: UsersUpdatePathParams["id"], data: UsersUpdateMutationRequest, config: Partial<RequestConfig<UsersUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<UsersUpdateMutationResponse, ResponseErrorConfig<Error>, UsersUpdateMutationRequest>({ method : "PUT", url : `/api/users/${id}/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/users/:id/}
 */
export function useUsersUpdate<TContext>(options: 
{
  mutation?: UseMutationOptions<UsersUpdateMutationResponse, ResponseErrorConfig<Error>, {id: UsersUpdatePathParams["id"], data: UsersUpdateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<UsersUpdateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? usersUpdateMutationKey()

  return useMutation<UsersUpdateMutationResponse, ResponseErrorConfig<Error>, {id: UsersUpdatePathParams["id"], data: UsersUpdateMutationRequest}, TContext>({
    mutationFn: async({ id, data }) => {
      return usersUpdate(id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}