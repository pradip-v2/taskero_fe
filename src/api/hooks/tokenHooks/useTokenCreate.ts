/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TokenCreateMutationRequest, TokenCreateMutationResponse } from "../../types/TokenCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tokenCreateMutationKey = () => [{ url: '/api/token/' }] as const

export type TokenCreateMutationKey = ReturnType<typeof tokenCreateMutationKey>

/**
 * @description Takes a set of user credentials and returns an access and refresh JSON webtoken pair to prove the authentication of those credentials.
 * {@link /api/token/}
 */
export async function tokenCreate(data: TokenCreateMutationRequest, config: Partial<RequestConfig<TokenCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TokenCreateMutationResponse, ResponseErrorConfig<Error>, TokenCreateMutationRequest>({ method : "POST", url : `/api/token/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Takes a set of user credentials and returns an access and refresh JSON webtoken pair to prove the authentication of those credentials.
 * {@link /api/token/}
 */
export function useTokenCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<TokenCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TokenCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tokenCreateMutationKey()

  return useMutation<TokenCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return tokenCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}