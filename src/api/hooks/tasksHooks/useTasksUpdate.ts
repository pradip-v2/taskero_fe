/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TasksUpdateMutationRequest, TasksUpdateMutationResponse, TasksUpdatePathParams } from "../../types/TasksUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tasksUpdateMutationKey = () => [{ url: '/api/tasks/:id/' }] as const

export type TasksUpdateMutationKey = ReturnType<typeof tasksUpdateMutationKey>

/**
 * {@link /api/tasks/:id/}
 */
export async function tasksUpdate(id: TasksUpdatePathParams["id"], data: TasksUpdateMutationRequest, config: Partial<RequestConfig<TasksUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TasksUpdateMutationResponse, ResponseErrorConfig<Error>, TasksUpdateMutationRequest>({ method : "PUT", url : `/api/tasks/${id}/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/tasks/:id/}
 */
export function useTasksUpdate<TContext>(options: 
{
  mutation?: UseMutationOptions<TasksUpdateMutationResponse, ResponseErrorConfig<Error>, {id: TasksUpdatePathParams["id"], data: TasksUpdateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TasksUpdateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tasksUpdateMutationKey()

  return useMutation<TasksUpdateMutationResponse, ResponseErrorConfig<Error>, {id: TasksUpdatePathParams["id"], data: TasksUpdateMutationRequest}, TContext>({
    mutationFn: async({ id, data }) => {
      return tasksUpdate(id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}