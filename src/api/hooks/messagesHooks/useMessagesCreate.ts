/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { MessagesCreateMutationRequest, MessagesCreateMutationResponse } from "../../types/MessagesCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const messagesCreateMutationKey = () => [{ url: '/api/messages/' }] as const

export type MessagesCreateMutationKey = ReturnType<typeof messagesCreateMutationKey>

/**
 * {@link /api/messages/}
 */
export async function messagesCreate(data: MessagesCreateMutationRequest, config: Partial<RequestConfig<MessagesCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<MessagesCreateMutationResponse, ResponseErrorConfig<Error>, MessagesCreateMutationRequest>({ method : "POST", url : `/api/messages/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/messages/}
 */
export function useMessagesCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<MessagesCreateMutationResponse, ResponseErrorConfig<Error>, {data: MessagesCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<MessagesCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? messagesCreateMutationKey()

  return useMutation<MessagesCreateMutationResponse, ResponseErrorConfig<Error>, {data: MessagesCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return messagesCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}