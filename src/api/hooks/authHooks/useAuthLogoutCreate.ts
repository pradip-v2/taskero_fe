/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthLogoutCreateMutationResponse } from "../../types/AuthLogoutCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const authLogoutCreateMutationKey = () => [{ url: '/api/auth/logout/' }] as const

export type AuthLogoutCreateMutationKey = ReturnType<typeof authLogoutCreateMutationKey>

/**
 * @description Calls Django logout method and delete the Token objectassigned to the current User object.Accepts/Returns nothing.
 * {@link /api/auth/logout/}
 */
export async function authLogoutCreate(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<AuthLogoutCreateMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "POST", url : `/api/auth/logout/`, ... requestConfig })  
  return res.data
}

/**
 * @description Calls Django logout method and delete the Token objectassigned to the current User object.Accepts/Returns nothing.
 * {@link /api/auth/logout/}
 */
export function useAuthLogoutCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthLogoutCreateMutationResponse, ResponseErrorConfig<Error>, void, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authLogoutCreateMutationKey()

  return useMutation<AuthLogoutCreateMutationResponse, ResponseErrorConfig<Error>, void, TContext>({
    mutationFn: async() => {
      return authLogoutCreate(config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}