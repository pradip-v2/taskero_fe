/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TenantsGetTenantThemeRetrieveQueryResponse, TenantsGetTenantThemeRetrieve404 } from "../../types/TenantsGetTenantThemeRetrieve.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const tenantsGetTenantThemeRetrieveQueryKey = () => [{ url: '/api/tenants/get-tenant-theme/' }] as const

export type TenantsGetTenantThemeRetrieveQueryKey = ReturnType<typeof tenantsGetTenantThemeRetrieveQueryKey>

/**
 * {@link /api/tenants/get-tenant-theme/}
 */
export async function tenantsGetTenantThemeRetrieve(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<TenantsGetTenantThemeRetrieveQueryResponse, ResponseErrorConfig<TenantsGetTenantThemeRetrieve404>, unknown>({ method : "GET", url : `/api/tenants/get-tenant-theme/`, ... requestConfig })  
  return res.data
}

export function tenantsGetTenantThemeRetrieveQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = tenantsGetTenantThemeRetrieveQueryKey()
  return queryOptions<TenantsGetTenantThemeRetrieveQueryResponse, ResponseErrorConfig<TenantsGetTenantThemeRetrieve404>, TenantsGetTenantThemeRetrieveQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return tenantsGetTenantThemeRetrieve(config)
   },
  })
}

/**
 * {@link /api/tenants/get-tenant-theme/}
 */
export function useTenantsGetTenantThemeRetrieve<TData = TenantsGetTenantThemeRetrieveQueryResponse, TQueryData = TenantsGetTenantThemeRetrieveQueryResponse, TQueryKey extends QueryKey = TenantsGetTenantThemeRetrieveQueryKey>(options: 
{
  query?: Partial<QueryObserverOptions<TenantsGetTenantThemeRetrieveQueryResponse, ResponseErrorConfig<TenantsGetTenantThemeRetrieve404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? tenantsGetTenantThemeRetrieveQueryKey()

  const query = useQuery({
   ...tenantsGetTenantThemeRetrieveQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<TenantsGetTenantThemeRetrieve404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}