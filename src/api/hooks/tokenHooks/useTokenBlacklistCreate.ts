/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TokenBlacklistCreateMutationRequest, TokenBlacklistCreateMutationResponse } from "../../types/TokenBlacklistCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tokenBlacklistCreateMutationKey = () => [{ url: '/api/token/blacklist/' }] as const

export type TokenBlacklistCreateMutationKey = ReturnType<typeof tokenBlacklistCreateMutationKey>

/**
 * @description Takes a token and blacklists it. Must be used with the`rest_framework_simplejwt.token_blacklist` app installed.
 * {@link /api/token/blacklist/}
 */
export async function tokenBlacklistCreate(data: TokenBlacklistCreateMutationRequest, config: Partial<RequestConfig<TokenBlacklistCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TokenBlacklistCreateMutationResponse, ResponseErrorConfig<Error>, TokenBlacklistCreateMutationRequest>({ method : "POST", url : `/api/token/blacklist/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Takes a token and blacklists it. Must be used with the`rest_framework_simplejwt.token_blacklist` app installed.
 * {@link /api/token/blacklist/}
 */
export function useTokenBlacklistCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<TokenBlacklistCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenBlacklistCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TokenBlacklistCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tokenBlacklistCreateMutationKey()

  return useMutation<TokenBlacklistCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenBlacklistCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return tokenBlacklistCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}