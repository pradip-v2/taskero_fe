/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TokenRefreshCreateMutationRequest, TokenRefreshCreateMutationResponse } from "../../types/TokenRefreshCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tokenRefreshCreateMutationKey = () => [{ url: '/api/token/refresh/' }] as const

export type TokenRefreshCreateMutationKey = ReturnType<typeof tokenRefreshCreateMutationKey>

/**
 * @description Takes a refresh type JSON web token and returns an access type JSON webtoken if the refresh token is valid.
 * {@link /api/token/refresh/}
 */
export async function tokenRefreshCreate(data: TokenRefreshCreateMutationRequest, config: Partial<RequestConfig<TokenRefreshCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TokenRefreshCreateMutationResponse, ResponseErrorConfig<Error>, TokenRefreshCreateMutationRequest>({ method : "POST", url : `/api/token/refresh/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Takes a refresh type JSON web token and returns an access type JSON webtoken if the refresh token is valid.
 * {@link /api/token/refresh/}
 */
export function useTokenRefreshCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<TokenRefreshCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenRefreshCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TokenRefreshCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tokenRefreshCreateMutationKey()

  return useMutation<TokenRefreshCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenRefreshCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return tokenRefreshCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}