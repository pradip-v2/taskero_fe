/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { SchemaRetrieveQueryResponse, SchemaRetrieveQueryParams } from "../../types/SchemaRetrieve.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const schemaRetrieveQueryKey = (params?: SchemaRetrieveQueryParams) => [{ url: '/api/schema/' }, ...(params ? [params] : [])] as const

export type SchemaRetrieveQueryKey = ReturnType<typeof schemaRetrieveQueryKey>

/**
 * @description OpenApi3 schema for this API. Format can be selected via content negotiation.- YAML: application/vnd.oai.openapi- JSON: application/vnd.oai.openapi+json
 * {@link /api/schema/}
 */
export async function schemaRetrieve(params?: SchemaRetrieveQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<SchemaRetrieveQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/schema/`, params, ... requestConfig })  
  return res.data
}

export function schemaRetrieveQueryOptions(params?: SchemaRetrieveQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = schemaRetrieveQueryKey(params)
  return queryOptions<SchemaRetrieveQueryResponse, ResponseErrorConfig<Error>, SchemaRetrieveQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return schemaRetrieve(params, config)
   },
  })
}

/**
 * @description OpenApi3 schema for this API. Format can be selected via content negotiation.- YAML: application/vnd.oai.openapi- JSON: application/vnd.oai.openapi+json
 * {@link /api/schema/}
 */
export function useSchemaRetrieve<TData = SchemaRetrieveQueryResponse, TQueryData = SchemaRetrieveQueryResponse, TQueryKey extends QueryKey = SchemaRetrieveQueryKey>(params?: SchemaRetrieveQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<SchemaRetrieveQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? schemaRetrieveQueryKey(params)

  const query = useQuery({
   ...schemaRetrieveQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}