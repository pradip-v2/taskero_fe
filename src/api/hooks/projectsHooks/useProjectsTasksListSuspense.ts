/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { ProjectsTasksListQueryResponse, ProjectsTasksListPathParams, ProjectsTasksListQueryParams } from "../../types/ProjectsTasksList.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const projectsTasksListSuspenseQueryKey = (parent_lookup_project: ProjectsTasksListPathParams["parent_lookup_project"], params?: ProjectsTasksListQueryParams) => [{ url: '/api/projects/:parent_lookup_project/tasks/', params: {parent_lookup_project:parent_lookup_project} }, ...(params ? [params] : [])] as const

export type ProjectsTasksListSuspenseQueryKey = ReturnType<typeof projectsTasksListSuspenseQueryKey>

/**
 * {@link /api/projects/:parent_lookup_project/tasks/}
 */
export async function projectsTasksListSuspense(parent_lookup_project: ProjectsTasksListPathParams["parent_lookup_project"], params?: ProjectsTasksListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ProjectsTasksListQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/projects/${parent_lookup_project}/tasks/`, params, ... requestConfig })  
  return res.data
}

export function projectsTasksListSuspenseQueryOptions(parent_lookup_project: ProjectsTasksListPathParams["parent_lookup_project"], params?: ProjectsTasksListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = projectsTasksListSuspenseQueryKey(parent_lookup_project, params)
  return queryOptions<ProjectsTasksListQueryResponse, ResponseErrorConfig<Error>, ProjectsTasksListQueryResponse, typeof queryKey>({
   enabled: !!(parent_lookup_project),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return projectsTasksListSuspense(parent_lookup_project, params, config)
   },
  })
}

/**
 * {@link /api/projects/:parent_lookup_project/tasks/}
 */
export function useProjectsTasksListSuspense<TData = ProjectsTasksListQueryResponse, TQueryKey extends QueryKey = ProjectsTasksListSuspenseQueryKey>(parent_lookup_project: ProjectsTasksListPathParams["parent_lookup_project"], params?: ProjectsTasksListQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ProjectsTasksListQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? projectsTasksListSuspenseQueryKey(parent_lookup_project, params)

  const query = useSuspenseQuery({
   ...projectsTasksListSuspenseQueryOptions(parent_lookup_project, params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}