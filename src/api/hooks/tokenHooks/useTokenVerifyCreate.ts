/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TokenVerifyCreateMutationRequest, TokenVerifyCreateMutationResponse } from "../../types/TokenVerifyCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tokenVerifyCreateMutationKey = () => [{ url: '/api/token/verify/' }] as const

export type TokenVerifyCreateMutationKey = ReturnType<typeof tokenVerifyCreateMutationKey>

/**
 * @description Takes a token and indicates if it is valid.  This view provides noinformation about a token's fitness for a particular use.
 * {@link /api/token/verify/}
 */
export async function tokenVerifyCreate(data: TokenVerifyCreateMutationRequest, config: Partial<RequestConfig<TokenVerifyCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TokenVerifyCreateMutationResponse, ResponseErrorConfig<Error>, TokenVerifyCreateMutationRequest>({ method : "POST", url : `/api/token/verify/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Takes a token and indicates if it is valid.  This view provides noinformation about a token's fitness for a particular use.
 * {@link /api/token/verify/}
 */
export function useTokenVerifyCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<TokenVerifyCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenVerifyCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TokenVerifyCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tokenVerifyCreateMutationKey()

  return useMutation<TokenVerifyCreateMutationResponse, ResponseErrorConfig<Error>, {data: TokenVerifyCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return tokenVerifyCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}