/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { ProjectMembersDestroyMutationResponse, ProjectMembersDestroyPathParams } from "../../types/ProjectMembersDestroy.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const projectMembersDestroyMutationKey = () => [{ url: '/api/project-members/:id/' }] as const

export type ProjectMembersDestroyMutationKey = ReturnType<typeof projectMembersDestroyMutationKey>

/**
 * {@link /api/project-members/:id/}
 */
export async function projectMembersDestroy(id: ProjectMembersDestroyPathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ProjectMembersDestroyMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "DELETE", url : `/api/project-members/${id}/`, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/project-members/:id/}
 */
export function useProjectMembersDestroy<TContext>(options: 
{
  mutation?: UseMutationOptions<ProjectMembersDestroyMutationResponse, ResponseErrorConfig<Error>, {id: ProjectMembersDestroyPathParams["id"]}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? projectMembersDestroyMutationKey()

  return useMutation<ProjectMembersDestroyMutationResponse, ResponseErrorConfig<Error>, {id: ProjectMembersDestroyPathParams["id"]}, TContext>({
    mutationFn: async({ id }) => {
      return projectMembersDestroy(id, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}