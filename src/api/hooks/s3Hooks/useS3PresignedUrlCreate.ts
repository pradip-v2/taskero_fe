/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { S3PresignedUrlCreateMutationRequest, S3PresignedUrlCreateMutationResponse, S3PresignedUrlCreate400 } from "../../types/S3PresignedUrlCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const s3PresignedUrlCreateMutationKey = () => [{ url: '/api/s3/presigned-url/' }] as const

export type S3PresignedUrlCreateMutationKey = ReturnType<typeof s3PresignedUrlCreateMutationKey>

/**
 * {@link /api/s3/presigned-url/}
 */
export async function s3PresignedUrlCreate(data: S3PresignedUrlCreateMutationRequest, config: Partial<RequestConfig<S3PresignedUrlCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<S3PresignedUrlCreateMutationResponse, ResponseErrorConfig<S3PresignedUrlCreate400>, S3PresignedUrlCreateMutationRequest>({ method : "POST", url : `/api/s3/presigned-url/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/s3/presigned-url/}
 */
export function useS3PresignedUrlCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<S3PresignedUrlCreateMutationResponse, ResponseErrorConfig<S3PresignedUrlCreate400>, {data: S3PresignedUrlCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<S3PresignedUrlCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? s3PresignedUrlCreateMutationKey()

  return useMutation<S3PresignedUrlCreateMutationResponse, ResponseErrorConfig<S3PresignedUrlCreate400>, {data: S3PresignedUrlCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return s3PresignedUrlCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}