/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthUserPartialUpdateMutationRequest, AuthUserPartialUpdateMutationResponse } from "../../types/AuthUserPartialUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const authUserPartialUpdateMutationKey = () => [{ url: '/api/auth/user/' }] as const

export type AuthUserPartialUpdateMutationKey = ReturnType<typeof authUserPartialUpdateMutationKey>

/**
 * @description Reads and updates UserModel fieldsAccepts GET, PUT, PATCH methods.Default accepted fields: username, first_name, last_nameDefault display fields: pk, username, email, first_name, last_nameRead-only fields: pk, emailReturns UserModel fields.
 * {@link /api/auth/user/}
 */
export async function authUserPartialUpdate(data?: AuthUserPartialUpdateMutationRequest, config: Partial<RequestConfig<AuthUserPartialUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<AuthUserPartialUpdateMutationResponse, ResponseErrorConfig<Error>, AuthUserPartialUpdateMutationRequest>({ method : "PATCH", url : `/api/auth/user/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Reads and updates UserModel fieldsAccepts GET, PUT, PATCH methods.Default accepted fields: username, first_name, last_nameDefault display fields: pk, username, email, first_name, last_nameRead-only fields: pk, emailReturns UserModel fields.
 * {@link /api/auth/user/}
 */
export function useAuthUserPartialUpdate<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthUserPartialUpdateMutationResponse, ResponseErrorConfig<Error>, {data?: AuthUserPartialUpdateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<AuthUserPartialUpdateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authUserPartialUpdateMutationKey()

  return useMutation<AuthUserPartialUpdateMutationResponse, ResponseErrorConfig<Error>, {data?: AuthUserPartialUpdateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return authUserPartialUpdate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}