/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthUserRetrieveQueryResponse } from "../../types/AuthUserRetrieve.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const authUserRetrieveQueryKey = () => [{ url: '/api/auth/user/' }] as const

export type AuthUserRetrieveQueryKey = ReturnType<typeof authUserRetrieveQueryKey>

/**
 * @description Reads and updates UserModel fieldsAccepts GET, PUT, PATCH methods.Default accepted fields: username, first_name, last_nameDefault display fields: pk, username, email, first_name, last_nameRead-only fields: pk, emailReturns UserModel fields.
 * {@link /api/auth/user/}
 */
export async function authUserRetrieve(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<AuthUserRetrieveQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/auth/user/`, ... requestConfig })  
  return res.data
}

export function authUserRetrieveQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = authUserRetrieveQueryKey()
  return queryOptions<AuthUserRetrieveQueryResponse, ResponseErrorConfig<Error>, AuthUserRetrieveQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return authUserRetrieve(config)
   },
  })
}

/**
 * @description Reads and updates UserModel fieldsAccepts GET, PUT, PATCH methods.Default accepted fields: username, first_name, last_nameDefault display fields: pk, username, email, first_name, last_nameRead-only fields: pk, emailReturns UserModel fields.
 * {@link /api/auth/user/}
 */
export function useAuthUserRetrieve<TData = AuthUserRetrieveQueryResponse, TQueryData = AuthUserRetrieveQueryResponse, TQueryKey extends QueryKey = AuthUserRetrieveQueryKey>(options: 
{
  query?: Partial<QueryObserverOptions<AuthUserRetrieveQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? authUserRetrieveQueryKey()

  const query = useQuery({
   ...authUserRetrieveQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}