/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { TasksDestroyMutationResponse, TasksDestroyPathParams } from "../../types/TasksDestroy.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const tasksDestroyMutationKey = () => [{ url: '/api/tasks/:id/' }] as const

export type TasksDestroyMutationKey = ReturnType<typeof tasksDestroyMutationKey>

/**
 * {@link /api/tasks/:id/}
 */
export async function tasksDestroy(id: TasksDestroyPathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<TasksDestroyMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "DELETE", url : `/api/tasks/${id}/`, ... requestConfig })  
  return res.data
}

/**
 * {@link /api/tasks/:id/}
 */
export function useTasksDestroy<TContext>(options: 
{
  mutation?: UseMutationOptions<TasksDestroyMutationResponse, ResponseErrorConfig<Error>, {id: TasksDestroyPathParams["id"]}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? tasksDestroyMutationKey()

  return useMutation<TasksDestroyMutationResponse, ResponseErrorConfig<Error>, {id: TasksDestroyPathParams["id"]}, TContext>({
    mutationFn: async({ id }) => {
      return tasksDestroy(id, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}