/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { MessagesListQueryResponse, MessagesListQueryParams } from "../../types/MessagesList.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const messagesListSuspenseQueryKey = (params?: MessagesListQueryParams) => [{ url: '/api/messages/' }, ...(params ? [params] : [])] as const

export type MessagesListSuspenseQueryKey = ReturnType<typeof messagesListSuspenseQueryKey>

/**
 * {@link /api/messages/}
 */
export async function messagesListSuspense(params?: MessagesListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<MessagesListQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/messages/`, params, ... requestConfig })  
  return res.data
}

export function messagesListSuspenseQueryOptions(params?: MessagesListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = messagesListSuspenseQueryKey(params)
  return queryOptions<MessagesListQueryResponse, ResponseErrorConfig<Error>, MessagesListQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return messagesListSuspense(params, config)
   },
  })
}

/**
 * {@link /api/messages/}
 */
export function useMessagesListSuspense<TData = MessagesListQueryResponse, TQueryKey extends QueryKey = MessagesListSuspenseQueryKey>(params?: MessagesListQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<MessagesListQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? messagesListSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...messagesListSuspenseQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}