/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { ConversationsRetrieveQueryResponse, ConversationsRetrievePathParams } from "../../types/ConversationsRetrieve.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const conversationsRetrieveQueryKey = (id: ConversationsRetrievePathParams["id"]) => [{ url: '/api/conversations/:id/', params: {id:id} }] as const

export type ConversationsRetrieveQueryKey = ReturnType<typeof conversationsRetrieveQueryKey>

/**
 * {@link /api/conversations/:id/}
 */
export async function conversationsRetrieve(id: ConversationsRetrievePathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ConversationsRetrieveQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/conversations/${id}/`, ... requestConfig })  
  return res.data
}

export function conversationsRetrieveQueryOptions(id: ConversationsRetrievePathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = conversationsRetrieveQueryKey(id)
  return queryOptions<ConversationsRetrieveQueryResponse, ResponseErrorConfig<Error>, ConversationsRetrieveQueryResponse, typeof queryKey>({
   enabled: !!(id),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return conversationsRetrieve(id, config)
   },
  })
}

/**
 * {@link /api/conversations/:id/}
 */
export function useConversationsRetrieve<TData = ConversationsRetrieveQueryResponse, TQueryData = ConversationsRetrieveQueryResponse, TQueryKey extends QueryKey = ConversationsRetrieveQueryKey>(id: ConversationsRetrievePathParams["id"], options: 
{
  query?: Partial<QueryObserverOptions<ConversationsRetrieveQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? conversationsRetrieveQueryKey(id)

  const query = useQuery({
   ...conversationsRetrieveQueryOptions(id, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}