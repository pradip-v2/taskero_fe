/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthLoginCreateMutationRequest, AuthLoginCreateMutationResponse } from "../../types/AuthLoginCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const authLoginCreateMutationKey = () => [{ url: '/api/auth/login/' }] as const

export type AuthLoginCreateMutationKey = ReturnType<typeof authLoginCreateMutationKey>

/**
 * @description Check the credentials and return the REST Tokenif the credentials are valid and authenticated.Calls Django Auth login method to register User IDin Django session frameworkAccept the following POST parameters: username, passwordReturn the REST Framework Token Object's key.
 * {@link /api/auth/login/}
 */
export async function authLoginCreate(data: AuthLoginCreateMutationRequest, config: Partial<RequestConfig<AuthLoginCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<AuthLoginCreateMutationResponse, ResponseErrorConfig<Error>, AuthLoginCreateMutationRequest>({ method : "POST", url : `/api/auth/login/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Check the credentials and return the REST Tokenif the credentials are valid and authenticated.Calls Django Auth login method to register User IDin Django session frameworkAccept the following POST parameters: username, passwordReturn the REST Framework Token Object's key.
 * {@link /api/auth/login/}
 */
export function useAuthLoginCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthLoginCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthLoginCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<AuthLoginCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authLoginCreateMutationKey()

  return useMutation<AuthLoginCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthLoginCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return authLoginCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}