/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { AuthPasswordChangeCreateMutationRequest, AuthPasswordChangeCreateMutationResponse } from "../../types/AuthPasswordChangeCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const authPasswordChangeCreateMutationKey = () => [{ url: '/api/auth/password/change/' }] as const

export type AuthPasswordChangeCreateMutationKey = ReturnType<typeof authPasswordChangeCreateMutationKey>

/**
 * @description Calls Django Auth SetPasswordForm save method.Accepts the following POST parameters: new_password1, new_password2Returns the success/fail message.
 * {@link /api/auth/password/change/}
 */
export async function authPasswordChangeCreate(data: AuthPasswordChangeCreateMutationRequest, config: Partial<RequestConfig<AuthPasswordChangeCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<AuthPasswordChangeCreateMutationResponse, ResponseErrorConfig<Error>, AuthPasswordChangeCreateMutationRequest>({ method : "POST", url : `/api/auth/password/change/`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Calls Django Auth SetPasswordForm save method.Accepts the following POST parameters: new_password1, new_password2Returns the success/fail message.
 * {@link /api/auth/password/change/}
 */
export function useAuthPasswordChangeCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthPasswordChangeCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthPasswordChangeCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<AuthPasswordChangeCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authPasswordChangeCreateMutationKey()

  return useMutation<AuthPasswordChangeCreateMutationResponse, ResponseErrorConfig<Error>, {data: AuthPasswordChangeCreateMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return authPasswordChangeCreate(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}