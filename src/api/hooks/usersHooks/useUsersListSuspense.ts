/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/api/client.ts";
import type { UsersListQueryResponse, UsersListQueryParams } from "../../types/UsersList.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/api/client.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const usersListSuspenseQueryKey = (params?: UsersListQueryParams) => [{ url: '/api/users/' }, ...(params ? [params] : [])] as const

export type UsersListSuspenseQueryKey = ReturnType<typeof usersListSuspenseQueryKey>

/**
 * {@link /api/users/}
 */
export async function usersListSuspense(params?: UsersListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<UsersListQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/users/`, params, ... requestConfig })  
  return res.data
}

export function usersListSuspenseQueryOptions(params?: UsersListQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = usersListSuspenseQueryKey(params)
  return queryOptions<UsersListQueryResponse, ResponseErrorConfig<Error>, UsersListQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return usersListSuspense(params, config)
   },
  })
}

/**
 * {@link /api/users/}
 */
export function useUsersListSuspense<TData = UsersListQueryResponse, TQueryKey extends QueryKey = UsersListSuspenseQueryKey>(params?: UsersListQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<UsersListQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? usersListSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...usersListSuspenseQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}